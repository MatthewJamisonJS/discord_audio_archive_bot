# Pre-commit hooks configuration
# Documentation: https://pre-commit.com/
#
# Installation: pip install pre-commit
# Setup: pre-commit install
# Run manually: pre-commit run --all-files
# Update hooks: pre-commit autoupdate

# Exclude common directories that should not be checked
exclude: '^(venv/|node_modules/|\.git/|\.tox/|\.eggs/|\.venv/|build/|dist/|\.cache/)'

# Default language version for all hooks
default_language_version:
  python: python3

repos:
  # Pre-commit built-in hooks for common file issues
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # Remove trailing whitespace from all files
      - id: trailing-whitespace
        name: Trim trailing whitespace
        args: [--markdown-linebreak-ext=md]

      # Ensure files end with a newline
      - id: end-of-file-fixer
        name: Fix end of files

      # Validate YAML file syntax
      - id: check-yaml
        name: Check YAML syntax
        args: [--safe]

      # Validate JSON file syntax
      - id: check-json
        name: Check JSON syntax

      # Check for merge conflict markers
      - id: check-merge-conflict
        name: Check for merge conflicts

      # Prevent committing large files (>500KB)
      - id: check-added-large-files
        name: Check for large files
        args: [--maxkb=500]

      # Check for files that would conflict on case-insensitive filesystems
      - id: check-case-conflict
        name: Check for case conflicts

      # Detect private keys
      - id: detect-private-key
        name: Detect private keys

  # Black - Uncompromising Python code formatter
  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black
        name: Format Python code with Black
        language_version: python3
        args:
          - --line-length=100
          - --target-version=py38

  # isort - Python import sorting
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort Python imports with isort
        args:
          - --profile=black
          - --line-length=100
          - --multi-line=3
          - --trailing-comma
          - --force-grid-wrap=0
          - --use-parentheses
          - --ensure-newline-before-comments

  # Flake8 - Python linting (configured to work with Black)
  - repo: https://github.com/PyCQA/flake8
    rev: 7.1.1
    hooks:
      - id: flake8
        name: Lint Python code with Flake8
        args:
          # Make flake8 compatible with Black
          - --max-line-length=100
          - --extend-ignore=E203,E266,E501,W503
          - --max-complexity=10
          - --select=B,C,E,F,W,T4,B9
        additional_dependencies:
          - flake8-bugbear
          - flake8-comprehensions

  # Bandit - Security linting for Python (light mode to avoid false positives)
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.10
    hooks:
      - id: bandit
        name: Check Python security issues with Bandit
        args:
          - --configfile=pyproject.toml
          - --quiet
          - --skip=B101,B601  # Skip assert_used and shell_injection (common false positives)
          - --exclude=tests,venv,node_modules
        additional_dependencies: ["bandit[toml]"]

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: Lint YAML files
        args:
          - --strict
          - --config-data
          - "{extends: default, rules: {line-length: {max: 120}, indentation: {spaces: 2}}}"

  # Check for common security issues in Python
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.3
    hooks:
      - id: python-safety-dependencies-check
        name: Check Python dependencies for known vulnerabilities
        files: requirements.txt
