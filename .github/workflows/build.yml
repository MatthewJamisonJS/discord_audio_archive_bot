name: Build & Package Validation

# Trigger on pull requests and pushes to main
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  test-installation:
    name: Test Package Installation
    runs-on: ${{ matrix.os }}
    needs: build-package

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11', '3.12']

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Install package from wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install dist/*.whl

      - name: Verify installation
        shell: bash
        run: |
          python -c "import discord; print(f'discord.py {discord.__version__} installed successfully')"
          python -c "import dotenv; print('python-dotenv installed successfully')"

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM node:20-slim

          # Install Python and system dependencies
          RUN apt-get update && apt-get install -y \
              python3 \
              python3-pip \
              python3-venv \
              ffmpeg \
              && rm -rf /var/lib/apt/lists/*

          # Set working directory
          WORKDIR /app

          # Copy package files
          COPY package*.json ./
          COPY pyproject.toml ./
          COPY README.md ./
          COPY LICENSE ./

          # Install Node.js dependencies
          RUN npm ci --only=production

          # Copy Python package
          COPY audio_archive_bot/ ./audio_archive_bot/

          # Install Python package with --break-system-packages for Docker
          RUN pip3 install --no-cache-dir --break-system-packages -e .

          # Copy remaining application files
          COPY . .

          # Create recordings directory
          RUN mkdir -p /app/recordings

          # Default command (can be overridden)
          CMD ["python3", "audio_archive_bot/hybrid_bot.py"]
          EOF

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: audio-archive-bot:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm audio-archive-bot:test python3 --version
          docker run --rm audio-archive-bot:test node --version
          docker run --rm audio-archive-bot:test ffmpeg -version

  validate-scripts:
    name: Validate Shell Scripts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Run ShellCheck on all shell scripts
        run: |
          find . -name "*.sh" -type f -exec shellcheck {} \; || true

      - name: Test setup script syntax
        run: |
          bash -n setup_universal.sh
          bash -n run_bot_forever.sh
          bash -n run_hybrid.sh
