name: CI

# Trigger on pushes and pull requests to the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort

      - name: Run Black
        run: black --check --diff .
        continue-on-error: true

      - name: Run isort
        run: isort --check --diff .
        continue-on-error: true

      - name: Run Flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

  test-python:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Verify imports
        run: |
          python -c "import discord; print(f'discord.py version: {discord.__version__}')"
          python -c "import dotenv; print('python-dotenv installed')"
          python -c "import pydub; print('pydub installed')"
          python -c "import psutil; print('psutil installed')"

      - name: Run Python syntax check
        run: |
          python -m py_compile hybrid_bot.py
          python -m py_compile voice_manager_hybrid.py
          python -m py_compile test_hybrid_system.py

      - name: Run system tests
        run: |
          python test_hybrid_system.py || true
        env:
          CI: true

  test-nodejs:
    name: Test Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: ['16', '18', '20']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Node.js dependencies
        run: npm ci

      - name: Verify Node.js installation
        run: |
          node --version
          npm --version

      - name: Check JavaScript syntax
        run: node --check voice_recorder.js

      - name: Verify dependencies
        run: |
          npm list @discordjs/voice
          npm list discord.js
          npm list @discordjs/opus

  integration-test:
    name: Integration Test (Python + Node.js)
    runs-on: ubuntu-latest
    needs: [lint, test-python, test-nodejs]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run hybrid system test
        run: python test_hybrid_system.py
        env:
          CI: true

      - name: Verify FFmpeg
        run: ffmpeg -version

      - name: Check recordings directory
        run: |
          mkdir -p recordings
          test -d recordings && echo "Recordings directory exists"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
