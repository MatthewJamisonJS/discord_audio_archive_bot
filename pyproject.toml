# PyProject configuration for audio_archive_bot
# Documentation: https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "audio-archive-bot"
version = "0.1.0"
description = "A hybrid Python/Node.js Discord bot that automatically records voice conversations with professional-quality MP3 output"
readme = "README.md"
authors = [
    {name = "Audio Archive Bot Contributors"}
]
maintainers = [
    {name = "Audio Archive Bot Contributors"}
]
license = {text = "MIT"}
keywords = [
    "discord",
    "bot",
    "audio",
    "recording",
    "voice",
    "mp3",
    "archive",
    "hybrid",
    "discord.py",
    "discord.js"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Multimedia :: Sound/Audio :: Capture/Recording",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
]
requires-python = ">=3.8"
dependencies = [
    "discord.py[voice]>=2.6.3",
    "python-dotenv>=1.0.0",
    "pydub>=0.25.1",
    "psutil>=5.9.0",
]

[project.urls]
Homepage = "https://github.com/MatthewJamisonJS/discord_audio_archive_bot"
Documentation = "https://github.com/MatthewJamisonJS/discord_audio_archive_bot#readme"
Repository = "https://github.com/MatthewJamisonJS/discord_audio_archive_bot"
Issues = "https://github.com/MatthewJamisonJS/discord_audio_archive_bot/issues"
Changelog = "https://github.com/MatthewJamisonJS/discord_audio_archive_bot/blob/main/CHANGELOG.md"

[project.scripts]
audio_bot_run = "audio_archive_bot.cli:main"

[tool.setuptools]
packages = ["audio_archive_bot"]

[tool.setuptools.package-data]
audio_archive_bot = ["*.json"]

[project.optional-dependencies]
dev = [
    # Code formatting and linting
    "black>=24.10.0",
    "isort>=5.13.2",
    "flake8>=7.1.1",
    "flake8-bugbear>=24.0.0",
    "flake8-comprehensions>=3.15.0",

    # Security and quality checks
    "bandit[toml]>=1.7.10",
    "safety>=3.2.0",

    # Pre-commit hooks
    "pre-commit>=4.0.0",

    # Testing (optional)
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | node_modules
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration (compatible with Black)
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["venv/*", "node_modules/*", ".git/*"]

# Bandit configuration (security linting)
[tool.bandit]
exclude_dirs = [
    "tests",
    "venv",
    "node_modules",
    ".git",
    ".venv",
]
# B101: assert_used - Often used in tests
# B601: paramiko_calls - False positives for shell commands
skips = ["B101", "B601"]

# Pytest configuration (optional, if you add tests later)
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
]

# Coverage configuration
[tool.coverage.run]
source = ["audio_archive_bot"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/node_modules/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
